r24<-r2+r4
req <- r24*r13/(r24+r13)
it <- 20/req
i1 <- 20/r13
i2 <- 20/r24
i1*r3-i2*r4
i1*r3+i2*r4
-i1*r3+i2*r4
r24
r1 <- 1500
r2 <- 1000
r4 <- 3000
r7 <- 3000
r3 <- 2000
r5 <- 2500
r6 <- 3500
a1 <- c(r1+r2+r3+r7,-r7,-r3)
a2 <- c(-r7,r7+r4+r5,0,-r5)
a1 <- c(r1+r2+r3+r7,-r7,-r3,0)
a3 <- c(-r3,0,r3+r6,-r6)
a4 <- c(0,-r5,-r6,r5+r6)
d <- c(0,0,0,-10)
A <- rbind(a1,a2,a3,a4)
D <- solve(A,d)
D[2]-D[4]
2.5*10^-3
r3 <- 2200
r5 <- 2200
r2 <- 1500
r4 <- 1500
r6 <- 1000
r1 <- 1000
ri3 <- (r2)/(r3+r2)
ri5 < (r4)/(r5+r4)
ri5 <- (r4)/(r5+r4)
rr3 <- (-r2*ri3)+(r2+r6)
rr5 <- ri5*(-r4)+(r4+r1)
irr4 <- -r6*rr3-r1*rr5+r6+r1
10/irr4
v <- 15
r1 <- r3
r31 <- 20000
r2 <- 12000
r4 <- 12000
r5 <- 15000
r6 <- 15000
a1 <- c(r5+r4,0,-r4)
a2 <- c(0,r31+r2,-r2)
a3 <- c(-r4,-r2,r2+r4+r6)
d <- c(-15,15,0)
A <- rbind(a1,a2,a3)
solve(A,d)
D <- solve(A,d)
D[2]-D[1]
r2*(D[2]-D[3])
r1 <- 2200
r2 <- 2200
r3 <- 1500
r4 <- 1500
r5 <- 1000
r6 <- 1000
10/(1/((r3^2)/(r1+r3)+r3+r5)+r5+r6+(1/(r4^2/(r2+r4)+r6+r4)))
10/(1/((r3^2)/(r1+r3)+r3+r5)+r5+r6+(1/(r4^2/(r2+r4)+r2+r4)))
10/(1/((r3^2)/(r1+r3)+r3+r5)+r5+r6+(1/(r4^2/(r2+r4)+r6+r4)))
10/(1/(r3^2/(r1+r3)+r3+r5)+r5+r6+(1/(r4^2/(r2+r4)+r6+r4)))
i4 <- 0.0049999
i3 <- r5*i4/(r3^2/(r1+r3)+r3+r5)
i3
2.27*2.2
a1 <- c(r2+r4,0,-r4,0)
q2 <- c(0,(-r3^2/(r1+r3)+r3+r5),-r5,0)
a2 <- c(0,(-r3^2/(r1+r3)+r3+r5),-r5,0)
a3 <- c(0,-r5,r5+r6,0)
a4 <- c(-r4,0,-r6,r6+r4)
A <- rbind(a1,a2,a3,a4)
A
-0.57*15
69.231-4000*40/13+80
-69.2+4000*35/13-80
-69.2+4*35/13-80
+69.2+4*35/13-80
+69.231+4*35/13-80
-5.7/15
-0.38*5
5*1.5
10/15
10/15*5
log?
?
}
??log
log2(-25.675)*15
log2(25.675)*15
log(2.5675)+15
1/log(2)*(log(2.5675)+15)
-2.5675*10^15/2^51
2^7+2^5+2^4
-325/log2
-325/log(2)
-325/log10(2)
-(1/325)/log10(2)
-(1/325)
-(1/325)/log10(2)
10^-325/2^-1079
10^-325/(2^-1079)
(10^-325)/(2^-1079)
2^-1079
10^-325
139/log2(10)
2^-39/10^-42
2^-1+2^-2+2^-3
2^-1+2^-2+2^-3+2^-5
2^-1+2^-2+2^-3+2^-6
2^-1+2^-2+2^-3+2^-6+2^7
2^-1+2^-2+2^-3+2^-6+2^-7
2^15
2^8
2^14
2^7
(2^1+2^3+2^6+2^7+2^8+2^10+2^12+2^13+2^14)-(2^14-1)
(13771+log2(1.00001))/log2(10)
2^2+2^3+2^4+2^6+2^-4+2^-5+2^-7
2^4
-325/log102
-325/log10(2)
2^2+2^5+2^-1+2^-2+2^-3+2^-6
2^7
2^6+2^5
2^6+2^5+2^4
2^6+2^5+2^3
2^6+2^5+2^3+2^2+2^1
2^7
2^7+2^6
127*2
2^7
2^4
(log10(2.7)+1)/log10(1)
(log10(2.7)+1)/log10(2)
27/2^4
2^-1+2^-3
2^-1+2^-3+2^-4
2^12
2^11
2^11+2^65
2^11+2^6
2^11+2^6+2^1
2^11+2^6+2^5+2^1
2^11+2^6+2^5+2^1+1
175*5
2^-3
3+8+2^16+2^22+2^23
1+2^15+2^16+2^17+2^18+2^19
2^3+2^19
2^5+2^21
2^1+2^17
2^1+2^15
2^-1+2^+2+2^+3
2^-1+2^-2+2^-3
2^-1+2^-2+2^-3+2^-4
2^7
2^6+2^4
2^6+2^5
2^6+2^5+2^4
2^6+2^5+2^3
2^6+2^5+2^3+2^2
2^6+2^5+2^3+2^2+2^1
2^7
2^7+2^6
2^7+2^5
2^7+2^5+2^4
2^7+2^5+2^4+2^3
2^7+2^5+2^4+2^3+2^0
2^5+2^4+2^3+2^0
2^6
2^7
2^6+2^5+2^4+2^3
2^6+2^5+2^4+2^3+2^2
2^6+2^5+2^4+2^3+2^1
2^7+2^5+2^4
2^7+2^5+2^4+2^1+2^0
2^5+2^4+2^1+2^0
(log10(2.6125)-1)/log10(2)
2.6125*2
2^-2
2^-2+2^-3
2^-2+2^-3+2^-4
2^-2+2^-3+2^-5
2^-2+2^-3+2^-5+2^-7
2^-2+2^-3+2^-5+2^-7+2^-9
2^-2+2^-3+2^-5+2^-7+2^-10
2^-2+2^-3+2^-5+2^-7+2^-11
1+2^15+2^16+2^17+2^18+2^19
2+2^15
2^10
2^11
2^11+2^5
2^11+2^7
2^11+2^6
2^11+2^6+2
2^11+2^6+2^4
2^11+2^6+2^5
2^11+2^6+2^5+2+1
2^11+2^
5
6
2^11+2^6
2^11+2^6+2
2^-1+2^-2+2^-3
2^-1+2^-2+2^-3+2^-4
2^8
2^7
2^7+2^5
2^7+2^5+2^4
2^7+2^5+2^4+2^3
2^7+2^5+2^4+2^3+2^0
2^5+2^4+2^3+2^0
2^6+2^5+2^4+2^3
2^7+2^5+2^4
2^7+2^5+2^4+2+1
2^5+2^4+2+1
2^6
2^7
2^7+2^3
2^7+2^4
2^8
2^7+2^6
2^7+2^6+2^5
2^7+2^6+2^4
2^7+2^6+2^4+2^3
2^7+2^6+2^4+2^2+2
2^7-2^6+2^4-2^3
2^-2+2^-3
2^-2+2^-3+2^-4
2^15+2^16+2^17+2^18+2^19+1
2^1+2^15
beep()
beep(sound=1,expr = NULL)
beep()
setwd(~/Desktop/practicasProgII/P3/P3)
setwd(/Desktop/practicasProgII/P3/P3)
setwd("~/Desktop/practicasProgII/P3/P3")
t <- read.table("tiemposseleccion.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos seleccion")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
t <- read.table("tiemposVectorDinamicoOrdenacionBurbuja.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos burbuja")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
t <- read.table("tiemposBurbuja.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos burbuja")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
t <- read.table("tiemposBurbuja.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos burbuja")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
t <- read.table("tiemposBurbuja.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos burbuja")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
t <- read.table("tiemposQuicksort.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos quicksort")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
setwd("~/Desktop/practicasProgII/P3/P3")#
t <- read.table("tiemposseleccion.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos seleccion")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
setwd("~/Desktop/practicasProgII/P3/P3")#
t <- read.table("tiemposseleccion.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos seleccion")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
t <- read.table("tiemposQuicksort.txt",#
                sep = "\t", col.names = c("x","y_bs")) # CARGA EN MEMORIA DEL FICHERO#
x <- t[,1] # Eje x: n, primera columna#
y_bs <- t[,2] # Eje y: t(n), segunda columna#
pol <- lm(y_bs ~ poly(x, 2), data = t) # ajustamos los puntos por minimos cuadrados a un polinomio de grado 2#
yajustadas <- predict(pol, t)#
# REPRESENTACION GRAFICA#
plot(t$x, t$y_bs, type='p', pch=19, lwd=0.5, col="blue",#
     xlab="n",ylab="t(n)",#
     main="Representacion tiempos quicksort")#
lines(t$x, yajustadas, type='l', lwd=2, col="red")#
legend("topleft", c("Empirica","Ajuste"),#
       lty=c(19,1), pch=c(19,-1), col=c("blue","red"))
